/*
Copyright DNITSCH WTFPL
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/dnitsch/reststrategy/apis/reststrategy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RestStrategyLister helps list RestStrategies.
// All objects returned here must be treated as read-only.
type RestStrategyLister interface {
	// List lists all RestStrategies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestStrategy, err error)
	// RestStrategies returns an object that can list and get RestStrategies.
	RestStrategies(namespace string) RestStrategyNamespaceLister
	RestStrategyListerExpansion
}

// restStrategyLister implements the RestStrategyLister interface.
type restStrategyLister struct {
	indexer cache.Indexer
}

// NewRestStrategyLister returns a new RestStrategyLister.
func NewRestStrategyLister(indexer cache.Indexer) RestStrategyLister {
	return &restStrategyLister{indexer: indexer}
}

// List lists all RestStrategies in the indexer.
func (s *restStrategyLister) List(selector labels.Selector) (ret []*v1alpha1.RestStrategy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestStrategy))
	})
	return ret, err
}

// RestStrategies returns an object that can list and get RestStrategies.
func (s *restStrategyLister) RestStrategies(namespace string) RestStrategyNamespaceLister {
	return restStrategyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RestStrategyNamespaceLister helps list and get RestStrategies.
// All objects returned here must be treated as read-only.
type RestStrategyNamespaceLister interface {
	// List lists all RestStrategies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RestStrategy, err error)
	// Get retrieves the RestStrategy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RestStrategy, error)
	RestStrategyNamespaceListerExpansion
}

// restStrategyNamespaceLister implements the RestStrategyNamespaceLister
// interface.
type restStrategyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RestStrategies in the indexer for a given namespace.
func (s restStrategyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RestStrategy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RestStrategy))
	})
	return ret, err
}

// Get retrieves the RestStrategy from the indexer for a given namespace and name.
func (s restStrategyNamespaceLister) Get(name string) (*v1alpha1.RestStrategy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("reststrategy"), name)
	}
	return obj.(*v1alpha1.RestStrategy), nil
}
